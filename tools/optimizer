#!/bin/bash
#
# webutil 1.0.1
#
# Copyright (c) 2012-2013 Ditesh Shashikant Gathani
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#

command -v csstidy >/dev/null 2>&1 || { echo >&2 "I require csstidy but it's not installed.  Aborting."; }
command -v optipng >/dev/null 2>&1 || { echo >&2 "I require optipng but it's not installed.  Aborting."; }
command -v uglifyjs >/dev/null 2>&1 || { echo >&2 "I require uglifyjs but it's not installed.  Aborting."; }
command -v phantomjs >/dev/null 2>&1 || { echo >&2 "I require phantomjs but it's not installed.  Aborting."; }

# Let's set up the support functions first
CURPATH=`dirname ${0}`
BASEPATH=`readlink -f ${CURPATH}`
source "$BASEPATH/common.sh"

# Basic setup
types=( png jpg gif css js )

for i in "${types[@]}"; do
    rm -rf "$TMPDIR/$i/post-processed"
    rm -rf "$TMPDIR/$i/post-processed-gzip"
    rm -rf "$TMPDIR/tmp"
    mkdir -p "$TMPDIR/$i/post-processed" "$TMPDIR/$i/post-processed-gzip"
done

# Setup folders correctly

rm -rf "$TMPDIR/jpg-to-png-files"
rm -rf "$TMPDIR/gif-to-png-files"
rm -rf "$TMPDIR/png-to-jpg-files"
mkdir -p "$TMPDIR/tmp"

# Check if conversions are required

if [ "$1" == "-convert" ]; then
    CONVERT=true
fi

JS=false
GIF=false
JPG=false
PNG=false
CSS=false

echo -e "\e[1;36mWeb Optimization Tool 1.0.1 (c) 2013 Ditesh Gathani <ditesh@gathani.org>\e[0m"
echo

echo -n "Checking for PNG files ... "
if [ -f "$TMPDIR/png-files" ]; then

    echo -n "optimizing ... "

    for i in `ls $TMPDIR/png/pre-processed/*`; do

        i=`echo $i | xargs -0 -n1 basename`

        # 1. Optimize the PNG
        RETVAL=`optipng -o 9 -out "$TMPDIR/tmp/$i" "$TMPDIR/png/pre-processed/$i"`
        PNGSIZE=$(size "$TMPDIR/tmp/$i")

        if [ -z $CONVERT ]; then

            cp "$TMPDIR/tmp/$i" "$TMPDIR/png/post-processed/$i"
            continue

        fi

        # 2. Convert the PNG to JPG
        RETVAL=`convert "$TMPDIR/tmp/$i" "$TMPDIR/tmp/$i.jpg"`

        # Optimize the JPG
        RETVAL=`jpegtran -optimize -copy none "$TMPDIR/tmp/$i.jpg" > "$TMPDIR/tmp/$i.optimized.jpg"`
        JPGSIZE=$(size "$TMPDIR/tmp/$i.jpg")

        if [ $PNGSIZE -gt $JPGSIZE ]; then

            echo "$i" >> "$TMPDIR/png-to-jpg-files"
            cp "$TMPDIR/tmp/$i.optimized.jpg" "$TMPDIR/png/post-processed/$i.jpg"

        else
            cp "$TMPDIR/tmp/$i" "$TMPDIR/png/post-processed/$i"
        fi

    done

    echo -n "optimization completed, "
    echo -n $(converted png)
    echo -n " file(s) converted ... "
    echo "done."

    post_processing png

    PNG=true
    PNGCOUNT=$(count png);
    PNGPRE=$(presize png);
    PNGPOST=$(postsize png);
    PNGDIFF=`echo "$PNGPRE-$PNGPOST" | bc | sed -E 's/^(-?)\./\10./'`
    PNGPER=`echo "scale=2;100*$PNGDIFF/$PNGPRE" | bc | sed -E 's/^(-?)\./\10./'`

    PNGPRE_COMPRESSED=$(presize png compressed)
    PNGPOST_COMPRESSED=$(postsize png compressed)
    PNGDIFF_COMPRESSED=`echo "$PNGPRE_COMPRESSED-$PNGPOST_COMPRESSED" | bc | sed -E 's/^(-?)\./\10./'`
    PNGPER_COMPRESSED=`echo "scale=2;100*$PNGDIFF_COMPRESSED/$PNGPRE_COMPRESSED" | bc | sed -E 's/^(-?)\./\10./'`

else echo "not found."
fi

echo -n "Checking for JPEG files ... "
if [ -f "$TMPDIR/jpg-files" ]; then

    echo -n "optimizing ... "

    for i in `ls $TMPDIR/jpg/pre-processed/*`; do

        i=`echo $i | xargs -0 -n1 basename`

        # 1. Optimize the JPG
        RETVAL=`jpegtran -optimize -copy none "$TMPDIR/jpg/pre-processed/$i" > "$TMPDIR/tmp/$i"`
        JPGSIZE=$(size "$TMPDIR/tmp/$i")

        if [ -z $CONVERT ]; then

            cp "$TMPDIR/tmp/$i" "$TMPDIR/jpg/post-processed/$i"
            continue

        fi

        # 2. Convert the JPG to PNG
        RETVAL=`convert "$TMPDIR/tmp/$i" "$TMPDIR/tmp/$i.png"`

        # Optimize the PNG
        RETVAL=`optipng -o 9 -out "$TMPDIR/tmp/$i.optimized.png" "$TMPDIR/tmp/$i.png"`
        PNGSIZE=$(size "$TMPDIR/tmp/$i.png")

        if [ $JPGSIZE -gt $PNGSIZE ]; then

            echo "$i" >> "$TMPDIR/jpg-to-png-files"
            cp "$TMPDIR/tmp/$i.optimized.png" "$TMPDIR/jpg/post-processed/$i.png"

        else
            cp "$TMPDIR/tmp/$i" "$TMPDIR/jpg/post-processed/$i"
        fi

    done

    echo -n "optimization completed, "
    echo -n $(converted jpg)
    echo -n " file(s) converted ... "
    echo "done."

    post_processing jpg

    JPG=true
    JPGCOUNT=$(count jpg);
    JPGPRE=$(presize jpg);
    JPGPOST=$(postsize jpg);
    JPGDIFF=`echo "$JPGPRE-$JPGPOST" | bc | sed -E 's/^(-?)\./\10./'`
    JPGPER=`echo "scale=2;100*$JPGDIFF/$JPGPRE" | bc | sed -E 's/^(-?)\./\10./'`

    JPGPRE_COMPRESSED=$(presize jpg compressed);
    JPGPOST_COMPRESSED=$(postsize jpg compressed);
    JPGDIFF_COMPRESSED=`echo "$JPGPRE_COMPRESSED-$JPGPOST_COMPRESSED" | bc | sed -E 's/^(-?)\./\10./'`
    JPGPER_COMPRESSED=`echo "scale=2;100*$JPGDIFF_COMPRESSED/$JPGPRE_COMPRESSED" | bc | sed -E 's/^(-?)\./\10./'`

else echo "not found."
fi

echo -n "Checking for GIF files ... "
if [ -f "$TMPDIR/gif-files" ]; then

    echo -n "optimizing ... "

    if [ -d $CONVERT ]; then

        cp $TMPDIR/gif/pre-processed/* $TMPDIR/gif/post-processed

    else 
        for i in `ls $TMPDIR/gif/pre-processed/*`; do

            i=`echo $i | xargs -0 -n1 basename`
            RETVAL=`optipng -o 9 -out "$TMPDIR/gif/post-processed/$i.png" "$TMPDIR/gif/pre-processed/$i"`

            if [[ "$?" -ne "0" || $(echo $RETVAL | grep "increase") ]]; then

                rm -f "$TMPDIR/gif/post-processed/$i.png"
                cp "$TMPDIR/gif/pre-processed/$i" "$TMPDIR/gif/post-processed/$i"

            else
                echo "$i" >> "$TMPDIR/gif-to-png-files"
            fi
        done
    fi

    echo -n "optimization completed, "
    echo -n $(converted gif)
    echo -n " file(s) converted ... "
    echo "done."

    post_processing gif

    GIF=true
    GIFCOUNT=$(count gif);
    GIFPRE=$(presize gif);
    GIFPOST=$(postsize gif);
    GIFDIFF=`echo "$GIFPRE-$GIFPOST" | bc | sed -E 's/^(-?)\./\10./'`
    GIFPER=`echo "scale=2;100*$GIFDIFF/$GIFPRE" | bc | sed -E 's/^(-?)\./\10./'`

    GIFPRE_COMPRESSED=$(presize gif compressed);
    GIFPOST_COMPRESSED=$(postsize gif compressed);
    GIFDIFF_COMPRESSED=`echo "$GIFPRE_COMPRESSED-$GIFPOST_COMPRESSED" | bc | sed -E 's/^(-?)\./\10./'`
    GIFPER_COMPRESSED=`echo "scale=2;100*$GIFDIFF_COMPRESSED/$GIFPRE_COMPRESSED" | bc | sed -E 's/^(-?)\./\10./'`

else echo "not found."
fi

echo -n "Checking for CSS files ... "
if [ -f "$TMPDIR/css-files" ]; then

    echo -n "optimizing ... "
    for i in `ls $TMPDIR/css/pre-processed/*`; do

        i=`echo $i | xargs -0 -n1 basename`
        csstidy "$TMPDIR/css/pre-processed/$i" --silent=true "$TMPDIR/css/post-processed/$i"

    done
    echo "done."

    post_processing css

    CSS=true
    CSSCOUNT=$(count css);
    CSSPRE=$(presize css);
    CSSPOST=$(postsize css);
    CSSDIFF=`echo "$CSSPRE-$CSSPOST" | bc | sed -E 's/^(-?)\./\10./'`
    CSSPER=`echo "scale=2;100*$CSSDIFF/$CSSPRE" | bc | sed -E 's/^(-?)\./\10./'`

    CSSPRE_COMPRESSED=$(presize css compressed);
    CSSPOST_COMPRESSED=$(postsize css compressed);
    CSSDIFF_COMPRESSED=`echo "$CSSPRE_COMPRESSED-$CSSPOST_COMPRESSED" | bc | sed -E 's/^(-?)\./\10./'`
    CSSPER_COMPRESSED=`echo "scale=2;100*$CSSDIFF_COMPRESSED/$CSSPRE_COMPRESSED" | bc | sed -E 's/^(-?)\./\10./'`

else echo "not found."
fi

echo -n "Checking for JS files ... "
if [ -f "$TMPDIR/js-files" ]; then

    echo -n "optimizing ..."
    for i in `ls $TMPDIR/js/pre-processed/*`; do

        i=`echo $i | xargs -0 -n1 basename`
        uglifyjs "$TMPDIR/js/pre-processed/$i" -o "$TMPDIR/js/post-processed/$i" -c > /dev/null 2>&1

        # Hack for uglify compression dropping the entire file
        if [ $(size "$TMPDIR/js/post-processed/$i") -eq 0 ]; then

            uglifyjs "$TMPDIR/js/pre-processed/$i" -o "$TMPDIR/js/post-processed/$i" > /dev/null  2>&1

            # If it still fails, just copy the original file over
            if [ $(size "$TMPDIR/js/post-processed/$i") -eq 0 ]; then
                cp "$TMPDIR/js/pre-processed/$i" "$TMPDIR/js/post-processed/"
            fi
        fi

    done
    echo "done."

    post_processing js

    JS=true
    JSCOUNT=$(count js);
    JSPRE=$(presize js);
    JSPOST=$(postsize js);
    JSDIFF=`echo "$JSPRE-$JSPOST" | bc | sed -E 's/^(-?)\./\10./'`
    JSPER=`echo "scale=2;100*$JSDIFF/$JSPRE" | bc | sed -E 's/^(-?)\./\10./'`

    JSPRE_COMPRESSED=$(presize js compressed);
    JSPOST_COMPRESSED=$(postsize js compressed);
    JSDIFF_COMPRESSED=`echo "$JSPRE_COMPRESSED-$JSPOST_COMPRESSED" | bc | sed -E 's/^(-?)\./\10./'`
    JSPER_COMPRESSED=`echo "scale=2;100*$JSDIFF_COMPRESSED/$JSPRE_COMPRESSED" | bc | sed -E 's/^(-?)\./\10./'`

else echo "not found."
fi

# Lets figure out what's the difference in time
#echo -n "Running critical path analysis ... "
#OUTPUT=`phantomjs $BASEPATH/../webutil.js -a $TMPDIR -cpa $@`
#echo "done"
#echo $OUTPUT;
#ASIS=`echo $OUTPUT | cut -d ' ' -f 1`
#OPTIMIZED_ASIS=`echo $OUTPUT | cut -d ' ' -f 4`
#OPTIMIZED_DECOMPRESSED=`echo $OUTPUT | cut -d ' ' -f 5`
#OPTIMIZED_COMPRESSED=`echo $OUTPUT | cut -d ' ' -f 6`

echo
echo -e "\e[1;34mRESULTS (with no compression)\e[0m"
echo
OUTPUT="ASSET COUNT AS-IS OPTIMIZED DIFF(KB) DIFF(%)\n"
OUTPUT=$OUTPUT"----- ----- ----- --------- -------- -------\n"
if $GIF; then OUTPUT=$OUTPUT"GIF ${GIFCOUNT} ${GIFPRE}KB ${GIFPOST}KB ${GIFDIFF}KB ${GIFPER}%\n"; fi
if $JPG; then OUTPUT=$OUTPUT"JPG ${JPGCOUNT} ${JPGPRE}KB ${JPGPOST}KB ${JPGDIFF}KB ${JPGPER}%\n"; fi
if $PNG; then OUTPUT=$OUTPUT"PNG ${PNGCOUNT} ${PNGPRE}KB ${PNGPOST}KB ${PNGDIFF}KB ${PNGPER}%\n"; fi
if $CSS; then OUTPUT=$OUTPUT"CSS ${CSSCOUNT} ${CSSPRE}KB ${CSSPOST}KB ${CSSDIFF}KB ${CSSPER}%\n"; fi
if $JS; then OUTPUT=$OUTPUT"JS ${JSCOUNT} ${JSPRE}KB ${JSPOST}KB ${JSDIFF}KB ${JSPER}%\n"; fi

TOTALCOUNT=`echo "${GIFCOUNT-0} + ${PNGCOUNT-0} + ${JPGCOUNT-0} + ${CSSCOUNT-0} + ${JSCOUNT-0}" | bc`
TOTALPRE=`echo "scale=2;${GIFPRE-0} + ${PNGPRE-0}+ ${JPGPRE-0} + ${CSSPRE-0} + ${JSPRE-0}" | bc | sed -E 's/^(-?)\./\10./'`
TOTALPOST=`echo "scale=2;${GIFPOST-0} + ${PNGPOST-0} + ${JPGPOST-0} + ${CSSPOST-0} + ${JSPOST-0}" | bc | sed -E 's/^(-?)\./\10./'`
TOTALDIFF=`echo "scale=2;${GIFDIFF-0} + ${PNGDIFF-0} + ${JPGDIFF-0} + ${CSSDIFF-0} + ${JSDIFF-0}" | bc | sed -E 's/^(-?)\./\10./'`

# Division by 0 check
if [ "$TOTALPRE" != "0" ]; then TOTALPER=`echo "scale=2;100*$TOTALDIFF/$TOTALPRE" | bc | sed -E 's/^(-?)\./\10./'`;
else TOTALPER="0"
fi

COST=`echo "scale=2; $TOTALDIFF * 1000000 * 0.19 / 1048576" | bc | sed -E 's/^(-?)\./\10./'`
OUTPUT=$OUTPUT"TOTAL ${TOTALCOUNT} ${TOTALPRE}KB ${TOTALPOST}KB ${TOTALDIFF}KB ${TOTALPER}%"

echo -e $OUTPUT | column -t
echo
echo -e "\e[1;30mAWS bandwidth savings:\e[0m USD$ ${COST} per million visits"
#echo -e "\e[1;30mTime taken:\e[0m $OPTIMIZED_DECOMPRESSED ms"

echo
echo -e "\e[1;34mRESULTS (with gzip compression)\e[0m"
echo

OUTPUT="RESOURCE COUNT AS-IS OPTIMIZED DIFF(KB) DIFF(%)\n"
OUTPUT=$OUTPUT"----- ----- ----- --------- -------- -------\n"
if $GIF; then OUTPUT=$OUTPUT"GIF ${GIFCOUNT} ${GIFPRE_COMPRESSED}KB ${GIFPOST_COMPRESSED}KB ${GIFDIFF_COMPRESSED}KB ${GIFPER_COMPRESSED}%\n"; fi
if $JPG; then OUTPUT=$OUTPUT"JPG ${JPGCOUNT} ${JPGPRE_COMPRESSED}KB ${JPGPOST_COMPRESSED}KB ${JPGDIFF_COMPRESSED}KB ${JPGPER_COMPRESSED}%\n"; fi
if $PNG; then OUTPUT=$OUTPUT"PNG ${PNGCOUNT} ${PNGPRE_COMPRESSED}KB ${PNGPOST_COMPRESSED}KB ${PNGDIFF_COMPRESSED}KB ${PNGPER_COMPRESSED}%\n"; fi
if $CSS; then OUTPUT=$OUTPUT"CSS ${CSSCOUNT} ${CSSPRE_COMPRESSED}KB ${CSSPOST_COMPRESSED}KB ${CSSDIFF_COMPRESSED}KB ${CSSPER_COMPRESSED}%\n"; fi
if $JS; then OUTPUT=$OUTPUT"JS ${JSCOUNT} ${JSPRE_COMPRESSED}KB ${JSPOST_COMPRESSED}KB ${JSDIFF_COMPRESSED}KB ${JSPER_COMPRESSED}%\n"; fi

TOTALPRE_COMPRESSED=`echo "scale=2;${GIFPRE_COMPRESSED-0} + ${PNGPRE_COMPRESSED-0}+ ${JPGPRE_COMPRESSED-0} + ${CSSPRE_COMPRESSED-0} + ${JSPRE_COMPRESSED-0}" | bc | sed -E 's/^(-?)\./\10./'`
TOTALPOST_COMPRESSED=`echo "scale=2;${GIFPOST_COMPRESSED-0} + ${PNGPOST_COMPRESSED-0} + ${JPGPOST_COMPRESSED-0} + ${CSSPOST_COMPRESSED-0} + ${JSPOST_COMPRESSED-0}" | bc | sed -E 's/^(-?)\./\10./'`
TOTALDIFF_COMPRESSED=`echo "scale=2;${GIFDIFF_COMPRESSED-0} + ${PNGDIFF_COMPRESSED-0} + ${JPGDIFF_COMPRESSED-0} + ${CSSDIFF_COMPRESSED-0} + ${JSDIFF_COMPRESSED-0}" | bc | sed -E 's/^(-?)\./\10./'`

# Division by 0 check
if [ "$TOTALPRE" != "0" ]; then
    TOTALPER_COMPRESSED=`echo "scale=2;100*$TOTALDIFF_COMPRESSED/$TOTALPRE_COMPRESSED" | bc | sed -E 's/^(-?)\./\10./'`;
else
    TOTALPER_COMPRESSED="0"
fi

COST_COMPRESSED=`echo "scale=2; $TOTALDIFF_COMPRESSED * 1000000 * 0.19 / 1048576" | bc | sed -E 's/^(-?)\./\10./'`
OUTPUT=$OUTPUT"TOTAL ${TOTALCOUNT} ${TOTALPRE_COMPRESSED}KB ${TOTALPOST_COMPRESSED}KB ${TOTALDIFF_COMPRESSED}KB ${TOTALPER_COMPRESSED}%"

echo -e $OUTPUT | column -t
echo
echo -e "\e[1;30mAWS bandwidth savings:\e[0m USD$ ${COST_COMPRESSED} per million visits"
#echo -e "\e[1;30mTime taken:\e[0m $OPTIMIZED_COMPRESSED ms"

# echo
# echo "Modified Assets"
# echo
# cat "$TMPDIR/modified-files"

echo
exit 0
